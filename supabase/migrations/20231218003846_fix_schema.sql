create table "public"."grocery_items" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone default now(),
    "item_name" character varying,
    "quantity" integer,
    "price_per_unit" character varying,
    "unit" character varying,
    "is_done" boolean not null default false,
    "grocery_list_id" character varying,
    "user_id" uuid default auth.uid(),
    "meal_id" character varying,
    "grocery_type" character varying
);


alter table "public"."grocery_items" enable row level security;

create table "public"."grocery_list" (
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone default now(),
    "grocery_type" character varying,
    "currency" character varying,
    "is_done" boolean not null default false,
    "id" character varying not null,
    "meal_id" character varying,
    "user_id" uuid default auth.uid()
);


alter table "public"."grocery_list" enable row level security;

create table "public"."meal_plan" (
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp without time zone default now(),
    "user_id" uuid not null default auth.uid(),
    "meal_name" character varying,
    "description" character varying,
    "thumbnail" character varying,
    "mealtime_type" character varying,
    "planned_date" character varying,
    "is_done" boolean not null default false,
    "recipe" jsonb,
    "cooking_time" character varying,
    "cuisine" character varying,
    "id" character varying not null
);


alter table "public"."meal_plan" enable row level security;

CREATE UNIQUE INDEX grocery_items_pkey ON public.grocery_items USING btree (id);

CREATE UNIQUE INDEX meal_plan_pkey ON public.meal_plan USING btree (id);

CREATE UNIQUE INDEX shopping_list_pkey ON public.grocery_list USING btree (id);

alter table "public"."grocery_items" add constraint "grocery_items_pkey" PRIMARY KEY using index "grocery_items_pkey";

alter table "public"."grocery_list" add constraint "shopping_list_pkey" PRIMARY KEY using index "shopping_list_pkey";

alter table "public"."meal_plan" add constraint "meal_plan_pkey" PRIMARY KEY using index "meal_plan_pkey";

alter table "public"."grocery_items" add constraint "grocery_items_grocery_list_id_fkey" FOREIGN KEY (grocery_list_id) REFERENCES grocery_list(id) not valid;

alter table "public"."grocery_items" validate constraint "grocery_items_grocery_list_id_fkey";

alter table "public"."grocery_items" add constraint "grocery_items_meal_id_fkey" FOREIGN KEY (meal_id) REFERENCES meal_plan(id) not valid;

alter table "public"."grocery_items" validate constraint "grocery_items_meal_id_fkey";

alter table "public"."grocery_items" add constraint "grocery_items_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."grocery_items" validate constraint "grocery_items_user_id_fkey";

alter table "public"."grocery_list" add constraint "grocery_list_meal_id_fkey" FOREIGN KEY (meal_id) REFERENCES meal_plan(id) not valid;

alter table "public"."grocery_list" validate constraint "grocery_list_meal_id_fkey";

alter table "public"."grocery_list" add constraint "grocery_list_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."grocery_list" validate constraint "grocery_list_user_id_fkey";

alter table "public"."meal_plan" add constraint "meal_plan_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."meal_plan" validate constraint "meal_plan_user_id_fkey";

grant delete on table "public"."grocery_items" to "anon";

grant insert on table "public"."grocery_items" to "anon";

grant references on table "public"."grocery_items" to "anon";

grant select on table "public"."grocery_items" to "anon";

grant trigger on table "public"."grocery_items" to "anon";

grant truncate on table "public"."grocery_items" to "anon";

grant update on table "public"."grocery_items" to "anon";

grant delete on table "public"."grocery_items" to "authenticated";

grant insert on table "public"."grocery_items" to "authenticated";

grant references on table "public"."grocery_items" to "authenticated";

grant select on table "public"."grocery_items" to "authenticated";

grant trigger on table "public"."grocery_items" to "authenticated";

grant truncate on table "public"."grocery_items" to "authenticated";

grant update on table "public"."grocery_items" to "authenticated";

grant delete on table "public"."grocery_items" to "service_role";

grant insert on table "public"."grocery_items" to "service_role";

grant references on table "public"."grocery_items" to "service_role";

grant select on table "public"."grocery_items" to "service_role";

grant trigger on table "public"."grocery_items" to "service_role";

grant truncate on table "public"."grocery_items" to "service_role";

grant update on table "public"."grocery_items" to "service_role";

grant delete on table "public"."grocery_list" to "anon";

grant insert on table "public"."grocery_list" to "anon";

grant references on table "public"."grocery_list" to "anon";

grant select on table "public"."grocery_list" to "anon";

grant trigger on table "public"."grocery_list" to "anon";

grant truncate on table "public"."grocery_list" to "anon";

grant update on table "public"."grocery_list" to "anon";

grant delete on table "public"."grocery_list" to "authenticated";

grant insert on table "public"."grocery_list" to "authenticated";

grant references on table "public"."grocery_list" to "authenticated";

grant select on table "public"."grocery_list" to "authenticated";

grant trigger on table "public"."grocery_list" to "authenticated";

grant truncate on table "public"."grocery_list" to "authenticated";

grant update on table "public"."grocery_list" to "authenticated";

grant delete on table "public"."grocery_list" to "service_role";

grant insert on table "public"."grocery_list" to "service_role";

grant references on table "public"."grocery_list" to "service_role";

grant select on table "public"."grocery_list" to "service_role";

grant trigger on table "public"."grocery_list" to "service_role";

grant truncate on table "public"."grocery_list" to "service_role";

grant update on table "public"."grocery_list" to "service_role";

grant delete on table "public"."meal_plan" to "anon";

grant insert on table "public"."meal_plan" to "anon";

grant references on table "public"."meal_plan" to "anon";

grant select on table "public"."meal_plan" to "anon";

grant trigger on table "public"."meal_plan" to "anon";

grant truncate on table "public"."meal_plan" to "anon";

grant update on table "public"."meal_plan" to "anon";

grant delete on table "public"."meal_plan" to "authenticated";

grant insert on table "public"."meal_plan" to "authenticated";

grant references on table "public"."meal_plan" to "authenticated";

grant select on table "public"."meal_plan" to "authenticated";

grant trigger on table "public"."meal_plan" to "authenticated";

grant truncate on table "public"."meal_plan" to "authenticated";

grant update on table "public"."meal_plan" to "authenticated";

grant delete on table "public"."meal_plan" to "service_role";

grant insert on table "public"."meal_plan" to "service_role";

grant references on table "public"."meal_plan" to "service_role";

grant select on table "public"."meal_plan" to "service_role";

grant trigger on table "public"."meal_plan" to "service_role";

grant truncate on table "public"."meal_plan" to "service_role";

grant update on table "public"."meal_plan" to "service_role";

create policy "Enable all action for users based on user_id"
on "public"."grocery_items"
as permissive
for all
to public
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));


create policy "Enable all action for users based on user_id"
on "public"."grocery_list"
as permissive
for all
to public
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));


create policy "Enable all action for users based on user_id"
on "public"."meal_plan"
as permissive
for all
to public
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));



