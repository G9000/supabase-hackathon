create type "public"."skill_level_enum" as enum ('BEGINNER', 'INTERMEDIATE', 'EXPERT');

create table "public"."diet_preferences" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone default now(),
    "user_id" uuid,
    "likes" character varying[],
    "dislikes" character varying[],
    "allergy" character varying[],
    "dietary_requirements" character varying[],
    "organic_preference" boolean not null default false,
    "meal_preferences" character varying[],
    "cuisine_preference" character varying[],
    "cooking_time_preference" character varying[],
    "favorite_ingredients" character varying[]
);


alter table "public"."diet_preferences" enable row level security;

create table "public"."grocery" (
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone default now(),
    "user_id" uuid,
    "name" character varying,
    "description" character varying,
    "recipe" character varying[],
    "budget" integer,
    "currency" character varying,
    "portion_sizes" integer,
    "total_spending" integer,
    "estimated_savings" integer,
    "repeatable" boolean not null default false,
    "id" uuid not null default gen_random_uuid()
);


alter table "public"."grocery" enable row level security;

create table "public"."grocery_item" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone default now(),
    "name" character varying,
    "quantity" character varying,
    "price_per_unit" integer,
    "done" boolean not null default false,
    "grocery_list_id" uuid
);


alter table "public"."grocery_item" enable row level security;

create table "public"."grocery_list" (
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone default now(),
    "completed" boolean not null default false,
    "schedule_on" timestamp with time zone,
    "total_spending" integer,
    "grocery_id" uuid,
    "id" uuid not null default gen_random_uuid()
);


alter table "public"."grocery_list" enable row level security;

create table "public"."users" (
    "id" uuid not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone default now(),
    "display_name" text,
    "email" text,
    "currency" character varying,
    "location" character varying,
    "total_spend" character varying
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX food_preferences_pkey ON public.diet_preferences USING btree (id);

CREATE UNIQUE INDEX grocery_item_pkey ON public.grocery_item USING btree (id);

CREATE UNIQUE INDEX grocery_list_pkey ON public.grocery_list USING btree (id);

CREATE UNIQUE INDEX grocery_pkey ON public.grocery USING btree (id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

alter table "public"."diet_preferences" add constraint "food_preferences_pkey" PRIMARY KEY using index "food_preferences_pkey";

alter table "public"."grocery" add constraint "grocery_pkey" PRIMARY KEY using index "grocery_pkey";

alter table "public"."grocery_item" add constraint "grocery_item_pkey" PRIMARY KEY using index "grocery_item_pkey";

alter table "public"."grocery_list" add constraint "grocery_list_pkey" PRIMARY KEY using index "grocery_list_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."diet_preferences" add constraint "diet_preferences_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table "public"."diet_preferences" validate constraint "diet_preferences_user_id_fkey";

alter table "public"."grocery" add constraint "grocery_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table "public"."grocery" validate constraint "grocery_user_id_fkey";

alter table "public"."grocery_item" add constraint "grocery_item_grocery_list_id_fkey" FOREIGN KEY (grocery_list_id) REFERENCES grocery_list(id) not valid;

alter table "public"."grocery_item" validate constraint "grocery_item_grocery_list_id_fkey";

alter table "public"."grocery_list" add constraint "grocery_list_grocery_id_fkey" FOREIGN KEY (grocery_id) REFERENCES grocery(id) not valid;

alter table "public"."grocery_list" validate constraint "grocery_list_grocery_id_fkey";

alter table "public"."users" add constraint "users_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) not valid;

alter table "public"."users" validate constraint "users_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.create_diet_preferences_on_sign_up()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  INSERT INTO public.diet_preferences(user_id)
  VALUES (NEW.id);
  RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.create_user_on_sign_up()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  INSERT INTO public.users (id, email)
  VALUES (NEW.id, NEW.email);
  RETURN NEW;
END;$function$
;

grant delete on table "public"."diet_preferences" to "anon";

grant insert on table "public"."diet_preferences" to "anon";

grant references on table "public"."diet_preferences" to "anon";

grant select on table "public"."diet_preferences" to "anon";

grant trigger on table "public"."diet_preferences" to "anon";

grant truncate on table "public"."diet_preferences" to "anon";

grant update on table "public"."diet_preferences" to "anon";

grant delete on table "public"."diet_preferences" to "authenticated";

grant insert on table "public"."diet_preferences" to "authenticated";

grant references on table "public"."diet_preferences" to "authenticated";

grant select on table "public"."diet_preferences" to "authenticated";

grant trigger on table "public"."diet_preferences" to "authenticated";

grant truncate on table "public"."diet_preferences" to "authenticated";

grant update on table "public"."diet_preferences" to "authenticated";

grant delete on table "public"."diet_preferences" to "service_role";

grant insert on table "public"."diet_preferences" to "service_role";

grant references on table "public"."diet_preferences" to "service_role";

grant select on table "public"."diet_preferences" to "service_role";

grant trigger on table "public"."diet_preferences" to "service_role";

grant truncate on table "public"."diet_preferences" to "service_role";

grant update on table "public"."diet_preferences" to "service_role";

grant delete on table "public"."grocery" to "anon";

grant insert on table "public"."grocery" to "anon";

grant references on table "public"."grocery" to "anon";

grant select on table "public"."grocery" to "anon";

grant trigger on table "public"."grocery" to "anon";

grant truncate on table "public"."grocery" to "anon";

grant update on table "public"."grocery" to "anon";

grant delete on table "public"."grocery" to "authenticated";

grant insert on table "public"."grocery" to "authenticated";

grant references on table "public"."grocery" to "authenticated";

grant select on table "public"."grocery" to "authenticated";

grant trigger on table "public"."grocery" to "authenticated";

grant truncate on table "public"."grocery" to "authenticated";

grant update on table "public"."grocery" to "authenticated";

grant delete on table "public"."grocery" to "service_role";

grant insert on table "public"."grocery" to "service_role";

grant references on table "public"."grocery" to "service_role";

grant select on table "public"."grocery" to "service_role";

grant trigger on table "public"."grocery" to "service_role";

grant truncate on table "public"."grocery" to "service_role";

grant update on table "public"."grocery" to "service_role";

grant delete on table "public"."grocery_item" to "anon";

grant insert on table "public"."grocery_item" to "anon";

grant references on table "public"."grocery_item" to "anon";

grant select on table "public"."grocery_item" to "anon";

grant trigger on table "public"."grocery_item" to "anon";

grant truncate on table "public"."grocery_item" to "anon";

grant update on table "public"."grocery_item" to "anon";

grant delete on table "public"."grocery_item" to "authenticated";

grant insert on table "public"."grocery_item" to "authenticated";

grant references on table "public"."grocery_item" to "authenticated";

grant select on table "public"."grocery_item" to "authenticated";

grant trigger on table "public"."grocery_item" to "authenticated";

grant truncate on table "public"."grocery_item" to "authenticated";

grant update on table "public"."grocery_item" to "authenticated";

grant delete on table "public"."grocery_item" to "service_role";

grant insert on table "public"."grocery_item" to "service_role";

grant references on table "public"."grocery_item" to "service_role";

grant select on table "public"."grocery_item" to "service_role";

grant trigger on table "public"."grocery_item" to "service_role";

grant truncate on table "public"."grocery_item" to "service_role";

grant update on table "public"."grocery_item" to "service_role";

grant delete on table "public"."grocery_list" to "anon";

grant insert on table "public"."grocery_list" to "anon";

grant references on table "public"."grocery_list" to "anon";

grant select on table "public"."grocery_list" to "anon";

grant trigger on table "public"."grocery_list" to "anon";

grant truncate on table "public"."grocery_list" to "anon";

grant update on table "public"."grocery_list" to "anon";

grant delete on table "public"."grocery_list" to "authenticated";

grant insert on table "public"."grocery_list" to "authenticated";

grant references on table "public"."grocery_list" to "authenticated";

grant select on table "public"."grocery_list" to "authenticated";

grant trigger on table "public"."grocery_list" to "authenticated";

grant truncate on table "public"."grocery_list" to "authenticated";

grant update on table "public"."grocery_list" to "authenticated";

grant delete on table "public"."grocery_list" to "service_role";

grant insert on table "public"."grocery_list" to "service_role";

grant references on table "public"."grocery_list" to "service_role";

grant select on table "public"."grocery_list" to "service_role";

grant trigger on table "public"."grocery_list" to "service_role";

grant truncate on table "public"."grocery_list" to "service_role";

grant update on table "public"."grocery_list" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

create policy "Enable all action for users based on user_id"
on "public"."diet_preferences"
as permissive
for all
to public
using ((auth.uid() = user_id));


create policy "Enable all action for users based on user_id"
on "public"."grocery"
as permissive
for all
to public
using ((auth.uid() = user_id));


create policy "Enable all action for users based on id"
on "public"."users"
as permissive
for all
to public
using ((auth.uid() = id));

-- Create the trigger 'new_user_trigger'
CREATE TRIGGER new_user_trigger
AFTER INSERT ON auth.users 
FOR EACH ROW
EXECUTE FUNCTION create_user_on_sign_up();

CREATE TRIGGER new_diet_preference_trigger AFTER INSERT ON public.users FOR EACH ROW EXECUTE FUNCTION create_diet_preferences_on_sign_up();


